 ///////////read data


 fun readData(string: String) {

        database = FirebaseDatabase.getInstance().getReference("Contacts")
        database.child(string).get().addOnSuccessListener {
            if (it.exists()) {
                val name = it.child("name").value
                val phone = it.child("phone").value

                binding.editTextSucheName.text.clear()
                binding.tvName.text = name.toString()
                binding.tvPhone.text = phone.toString()
            }
            //  else Toast.makeText(this,"no matching results",Toast.LENGTH_SHORT).show()
        }
    }

//////old ContactAdapter


class ContactAdapter(private val context: Context, private val contactList: List<Contact>) :
    RecyclerView.Adapter<ContactAdapter.ViewHolder>() {

    override fun onCreateViewHolder(parent: ViewGroup, viewType: Int): ViewHolder {
        val view = LayoutInflater.from(context).inflate(R.layout.contact_item, parent, false)
        return ViewHolder(view)
    }

    override fun onBindViewHolder(holder: ViewHolder, position: Int) {
        val contact = contactList[position]
        holder.nameTextView.text = contact.name
        holder.phoneTextView.text = contact.phone
        holder.placeTextView.text = contact.place
    }

    override fun getItemCount(): Int {
        return contactList.size
    }

    inner class ViewHolder(itemView: View) : RecyclerView.ViewHolder(itemView) {
        val nameTextView: TextView = itemView.findViewById(R.id.name_text_view)
        val phoneTextView: TextView = itemView.findViewById(R.id.phone_text_view)
        val placeTextView: TextView = itemView.findViewById(R.id.phone_text_view)
    }
}


///////searchData

  private fun searchData() {
        val searchTerm = binding.editTextSucheName.text.toString().trim()
        if (searchTerm.isEmpty()) {
            return
        }

        val query = contactsReference.orderByChild("name").startAt(searchTerm).endAt(searchTerm + "\uf8ff")
        try {
            query.addListenerForSingleValueEvent(object : ValueEventListener {
                override fun onDataChange(dataSnapshot: DataSnapshot) {
                    for (contactSnapshot in dataSnapshot.children) {
                        val contact = contactSnapshot.getValue(Contact::class.java)
                        matchingContacts.add(contact!!)
                    }
                    val adapter = ContactAdapter(contactsReference)
                    binding.recyclerView.adapter = adapter
                }

                override fun onCancelled(databaseError: DatabaseError) {
                    // Handle errors
                }
            })
        } catch (e: Exception) {
            e.message?.let { Log.e("Error", it) }
        }



////////Complete SecondFragment with Recycler View and Contact Adapter


        class SecondFragment : Fragment() {

            private lateinit var recyclerView: RecyclerView
            private lateinit var searchEditText: EditText
            private lateinit var databaseReference: DatabaseReference
            private lateinit var adapter: ContactAdapter
            private lateinit var binding: FragmentSecondBinding

            override fun onCreateView(
                inflater: LayoutInflater, container: ViewGroup?,
                savedInstanceState: Bundle?
            ): View? {
                val view = inflater.inflate(R.layout.fragment_second, container, false)
                searchEditText = view.findViewById(R.id.editTextSucheName)


                databaseReference = FirebaseDatabase.getInstance().reference.child("contacts")

                val query = databaseReference.orderByChild("name")

                val options = FirebaseRecyclerOptions.Builder<Contact>()
                    .setQuery(query, Contact::class.java)
                    .build()

                adapter = ContactAdapter(options)
                binding.recyclerView.adapter = adapter

                searchEditText.addTextChangedListener(object : TextWatcher {
                    override fun afterTextChanged(s: Editable?) {
                        // do nothing
                    }

                    override fun beforeTextChanged(s: CharSequence?, start: Int, count: Int, after: Int) {
                        // do nothing
                    }

                    override fun onTextChanged(s: CharSequence?, start: Int, before: Int, count: Int) {
                        val searchText = searchEditText.text.toString().trim()
                        searchContacts(searchText)
                    }
                })

                return view
            }

            private fun searchContacts(query: String) {
                val firebaseSearchQuery: Query = databaseReference
                    .orderByChild("name")
                    .startAt(query)
                    .endAt(query + "\uf8ff")

                val firebaseRecyclerOptions: FirebaseRecyclerOptions<Contact> =
                    FirebaseRecyclerOptions.Builder<Contact>()
                        .setQuery(firebaseSearchQuery, Contact::class.java)
                        .build()

                adapter = ContactAdapter(firebaseRecyclerOptions)
                recyclerView.adapter = adapter
                adapter.startListening()
            }

        }




 ///////////////////////////////////////////////////////////////////////////////////////////////////////

            private fun readData(contactname: String) {

                databaseReference = FirebaseDatabase.getInstance().getReference("Contacts")
                databaseReference.child(contactname).get().addOnCompleteListener {
                if(it.isSuccessful) {
                    if(it.result.exists()) {
                        Toast.makeText(activity,"Succesfully Read",Toast.LENGTH_SHORT).show()
                        val dataSnapshot: DataSnapshot = it.result
                        val name = dataSnapshot.child("name").getValue().toString()
                        val phone = dataSnapshot.child("phone").getValue().toString()

                        binding.etname.setText(name)
                        binding.etphone.setText(phone)

                    }else { Toast.makeText(activity,"User Does not Exist",Toast.LENGTH_SHORT).show()}

                }
                    else{ Toast.makeText(activity,"Please enter name",Toast.LENGTH_SHORT).show() }
                }

            }

//////////////////////////SEARCH DATA
    binding.Searchbutton.setOnClickListener {
            val placeQuery = binding.sucheOrt.text.toString().trim()

// Build the base query to filter contacts by place
            var query = databaseReference.orderByChild("place").equalTo(placeQuery)

// Add additional filters based on checkbox values
            val availableQuery = binding.checkVerfuegbar.isChecked
            val waitinglistQuery = binding.checkWarte.isChecked
            val privatQuery = binding.checkPrivat.isChecked
            val gesetzlQuery = binding.checkGesetzl.isChecked
            val selbstQuery = binding.checkSelbstz.isChecked

// Create a list to hold the filtered queries
            val filteredQueries = mutableListOf<Query>()

            if (availableQuery) {
                val availableQuery = databaseReference.orderByChild("v").equalTo(true)
                filteredQueries.add(availableQuery)
            }
            if (waitinglistQuery) {
                val waitinglistQuery = databaseReference.orderByChild("w").equalTo(true)
                filteredQueries.add(waitinglistQuery)
            }
            if (privatQuery) {
                val privatQuery = databaseReference.orderByChild("p").equalTo(true)
                filteredQueries.add(privatQuery)
            }
            if (gesetzlQuery) {
                val gesetzlQuery = databaseReference.orderByChild("g").equalTo(true)
                filteredQueries.add(gesetzlQuery)
            }
            if (selbstQuery) {
                val selbstQuery = databaseReference.orderByChild("s").equalTo(true)
                filteredQueries.add(selbstQuery)
            }

// Combine the base query and the filtered queries
            if (filteredQueries.isNotEmpty()) {
                query = query.orderByChild("dummy") // add a dummy child node to the base query
                for (filteredQuery in filteredQueries) {
                    query = query.startAt("0,").endAt("0," + filteredQuery.toString())
                }
            }

// Execute the query and display the search results in a fragment
            query.addListenerForSingleValueEvent(object : ValueEventListener {
                override fun onDataChange(dataSnapshot: DataSnapshot) {
                    val contactList: MutableList<Contact> = ArrayList()
                    for (snapshot in dataSnapshot.children) {
                        val contact = snapshot.getValue(Contact::class.java)
                        if (contact != null) {
                            contactList.add(contact)
                        }
                    }
                    binding.fragmentContainer.removeAllViews()
                    val searchResultsFragment = SearchResultFragment()
                    val bundle = Bundle()
                    bundle.putParcelableArrayList("contactList", ArrayList(contactList))
                    searchResultsFragment.arguments = bundle


                    binding.sucheOrt.setVisibility(View.GONE);
                    binding.textVerfuegbar.setVisibility(View.GONE)
                    binding.checkVerfuegbar.setVisibility(View.GONE)
                    binding.checkWarte.setVisibility(View.GONE)
                    binding.textAbrechnung.setVisibility(View.GONE)
                    binding.checkGesetzl.setVisibility(View.GONE)
                    binding.checkPrivat.setVisibility(View.GONE)
                    binding.checkSelbstz.setVisibility(View.GONE)
                    binding.textGeschlecht.setVisibility(View.GONE)
                    binding.checkW.setVisibility(View.GONE)
                    binding.checkM.setVisibility(View.GONE)
                    binding.checkD.setVisibility(View.GONE)


                    fragmentManager?.commit {
                        setReorderingAllowed(true)
                        // Replace whatever is in the fragment_container view with this fragment
                        replace(R.id.fragment_container, searchResultsFragment)
                    }
                }

                override fun onCancelled(databaseError: DatabaseError) {
                    Log.e(TAG, "Firebase database error: $databaseError")
                }
            })

        }



