 ///////////read data


 fun readData(string: String) {

        database = FirebaseDatabase.getInstance().getReference("Contacts")
        database.child(string).get().addOnSuccessListener {
            if (it.exists()) {
                val name = it.child("name").value
                val phone = it.child("phone").value

                binding.editTextSucheName.text.clear()
                binding.tvName.text = name.toString()
                binding.tvPhone.text = phone.toString()
            }
            //  else Toast.makeText(this,"no matching results",Toast.LENGTH_SHORT).show()
        }
    }

//////old ContactAdapter


class ContactAdapter(private val context: Context, private val contactList: List<Contact>) :
    RecyclerView.Adapter<ContactAdapter.ViewHolder>() {

    override fun onCreateViewHolder(parent: ViewGroup, viewType: Int): ViewHolder {
        val view = LayoutInflater.from(context).inflate(R.layout.contact_item, parent, false)
        return ViewHolder(view)
    }

    override fun onBindViewHolder(holder: ViewHolder, position: Int) {
        val contact = contactList[position]
        holder.nameTextView.text = contact.name
        holder.phoneTextView.text = contact.phone
        holder.placeTextView.text = contact.place
    }

    override fun getItemCount(): Int {
        return contactList.size
    }

    inner class ViewHolder(itemView: View) : RecyclerView.ViewHolder(itemView) {
        val nameTextView: TextView = itemView.findViewById(R.id.name_text_view)
        val phoneTextView: TextView = itemView.findViewById(R.id.phone_text_view)
        val placeTextView: TextView = itemView.findViewById(R.id.phone_text_view)
    }
}


///////searchData

  private fun searchData() {
        val searchTerm = binding.editTextSucheName.text.toString().trim()
        if (searchTerm.isEmpty()) {
            return
        }

        val query = contactsReference.orderByChild("name").startAt(searchTerm).endAt(searchTerm + "\uf8ff")
        try {
            query.addListenerForSingleValueEvent(object : ValueEventListener {
                override fun onDataChange(dataSnapshot: DataSnapshot) {
                    for (contactSnapshot in dataSnapshot.children) {
                        val contact = contactSnapshot.getValue(Contact::class.java)
                        matchingContacts.add(contact!!)
                    }
                    val adapter = ContactAdapter(contactsReference)
                    binding.recyclerView.adapter = adapter
                }

                override fun onCancelled(databaseError: DatabaseError) {
                    // Handle errors
                }
            })
        } catch (e: Exception) {
            e.message?.let { Log.e("Error", it) }
        }